<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>中文博客 on My Lives</title>
    <link>/blog/cn/</link>
    <description>Recent content in 中文博客 on My Lives</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Sep 2017 09:06:46 +0000</lastBuildDate>
    <atom:link href="/blog/cn/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Git 参考手册</title>
      <link>/blog/cn/2017/09/git_command/</link>
      <pubDate>Thu, 07 Sep 2017 09:06:46 +0000</pubDate>
      
      <guid>/blog/cn/2017/09/git_command/</guid>
      <description>
        &lt;p&gt;Git &lt;a href=&#34;http://gitref.justjavac.com/&#34;&gt;参考手册中文&lt;/a&gt; &lt;br&gt;
Git &lt;a href=&#34;https://git-scm.com/about&#34;&gt;参考手册ENG&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;git check out -b 创建新分支，并立即切换到它。与以下等效：

&lt;ul&gt;
&lt;li&gt;git branch newbranch&lt;/li&gt;
&lt;li&gt;git checkout newbranch&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;git merge [branch] 将[branch] 分枝合并到当前分支中&lt;/li&gt;
&lt;li&gt;git push [alias] [branch]，就会将你的[branch]分支推送成为[alias]远端上的[branch] 分支&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>HTML基本语法</title>
      <link>/blog/cn/2017/09/html_basic/</link>
      <pubDate>Tue, 05 Sep 2017 23:03:13 +0000</pubDate>
      
      <guid>/blog/cn/2017/09/html_basic/</guid>
      <description>
        &lt;p&gt;wait for&amp;hellip;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Ubuntu 安装R</title>
      <link>/blog/cn/2017/09/ubuntu_r/</link>
      <pubDate>Tue, 05 Sep 2017 23:03:13 +0000</pubDate>
      
      <guid>/blog/cn/2017/09/ubuntu_r/</guid>
      <description>
        

&lt;ol&gt;
&lt;li&gt;Ubuntu16.04&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;r&#34;&gt;R&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sudo echo &amp;quot;deb http://cran.rstudio.com/bin/linux/ubuntu xenial/&amp;quot; | sudo tee -a /etc/apt/sources.list 
gpg --keyserver keyserver.ubuntu.com --recv-key 51716619E084DAB9
gpg -a --export 51716619E084DAB9 | sudo apt-key add -
sudo apt-get update
sudo apt-get install r-base r-base-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rstudio&#34;&gt;Rstudio&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/&#34;&gt;Latest file&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sudo apt-get install gdebi-core
sudo gdebi -n rstudio-1.0.44-amd64.deb
rm rstudio-1.0.44-amd64.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rstudio-server&#34;&gt;Rstudio server&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.rstudio.com/products/rstudio/download-server/&#34;&gt;Latest&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sudo apt-get install gdebi-core
sudo gdebi -n rstudio-1.0.44-amd64.deb
rm rstudio-1.0.44-amd64.deb
完成安装后，RStudio Server会自动启动运行
ps -aux|grep rstudio
8787端口被打开
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;root用户无法登陆，新建一个用户进行登陆 
useradd -d /home/R -m R，创建用户的同时指定主目录 
passwd R，设置密码

系统设置 
主要有两个配置文件，默认文件不存在 
/etc/rstudio/rserver.conf 
/etc/rstudio/rsession.conf

设置端口和ip控制:
vi /etc/rstudio/rserver.conf
www-port=8080#监听端口
www-address=127.0.0.0#允许访问的IP地址，默认0.0.0.0
重启服务器，生效
rstudio-server restart

会话配置管理
vi /etc/rstudio/rsession.conf
session-timeout-minutes=30#会话超时时间
r-cran-repos=http://ftp.ctex.org/mirrors/CRAN#CRAN资源库

rstudio-server start #启动
rstudio-server stop #停止
rstudio-server restart #重启

查看运行中R进程
rstudio-server active-sessions
指定PID，停止运行中的R进程
rstudio-server suspend-session &amp;lt;pid&amp;gt;
停止所有运行中的R进程
rstudio-server  suspend-all
强制停止运行中的R进程，优先级最高，立刻执行
rstudio-server force-suspend-session &amp;lt;pid&amp;gt;
rstudio-server force-suspend-all
RStudio Server临时下线，不允许web访问，并给用户友好提示
rstudio-server offline
RStudio Server临时上线
rstudio-server online
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>层叠样式表 (Cascading Style Sheets)小结</title>
      <link>/blog/cn/2017/09/css-study/</link>
      <pubDate>Mon, 04 Sep 2017 23:03:13 +0000</pubDate>
      
      <guid>/blog/cn/2017/09/css-study/</guid>
      <description>
        

&lt;p&gt;CSS是一个我一直认为web前段技术，我知道我肯定能学会，但是我却不肯学，可是可是我总是对网页有一种莫名的向往，现在有了R,markdown,shiny,可以回避JSP,PHP等总不愿意学会的工具了，可是HTML,CSS,JS却无法回避了,这是开始shiny之后又不得不继续深入的一个topic. Shiny 的表现太土了.&lt;br /&gt;
  一些概念：样式表定义如何显示 HTML 元素&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;css&#34;&gt;CSS&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.runoob.com/css/css-intro.html&#34;&gt;在线教程&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.runoob.com/cssref/css-reference.html&#34;&gt;参考手册&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;css-语法&#34;&gt;CSS 语法&lt;/h1&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明:&lt;br /&gt;
如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p{  
text-align:center;  /*这是另一个注释*/  
color:black;  
font-family:arial;  
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;id 选择器: id 选择器以 &amp;ldquo;#&amp;rdquo; 来定义&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#para1
{
text-align:center;
color:red;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;class 选择器：类选择器以一个点&amp;rdquo;.&amp;ldquo;号显示&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;.cen {text-align:center;}  
/*所以拥有cen类的HTML元素都居中*/  
另外，可以指定所有 p 元素使用 class=&amp;quot;center&amp;quot; 让该元素的文本居中  
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;  &amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; 
&amp;lt;title&amp;gt;菜鸟教程(runoob.com)&amp;lt;/title&amp;gt; 
&amp;lt;style&amp;gt;
p.center
{
    text-align:center;
}
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1 class=&amp;quot;center&amp;quot;&amp;gt;这个标题不受影响&amp;lt;/h1&amp;gt;
&amp;lt;p class=&amp;quot;center&amp;quot;&amp;gt;这个段落居中对齐。&amp;lt;/p&amp;gt; 
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;样式表种类&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;外部样式表&lt;/li&gt;

&lt;li&gt;&lt;p&gt;内部样式表&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;内联样式&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;  &amp;lt;head&amp;gt;
    &amp;lt;!-- 外部样式 style.css --&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;style.css&amp;quot;/&amp;gt;
    &amp;lt;!-- 设置：h3{color:blue;} --&amp;gt;
    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
      /* 内部样式 */
      h3{color:green;}
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h3&amp;gt;测试！&amp;lt;/h3&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;CSS 背景&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;  背景颜色
  body {background-color:#b0c4de;}   #&amp;quot;#ff0000&amp;quot;,&amp;quot;rgb(255,0,0)&amp;quot;,&amp;quot;red&amp;quot;三种表示都可以
  h1 {background-color:#6495ed;}
  p {background-color:#e0ffff;}
  div {background-color:#b0c4de;}
  背景图像
  body {background-image:url(&#39;paper.gif&#39;);}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;CSS 文本格式&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;##颜色
body {color:red;}
h1 {color:#00ff00;}
h2 {color:rgb(255,0,0);}
##对齐
h1 {text-align:center;}
p.date {text-align:right;}
p.main {text-align:justify;}
##文本修饰
h1 {text-decoration:overline;}
h2 {text-decoration:line-through;}
h3 {text-decoration:underline;}
## 文本转换
p.uppercase {text-transform:uppercase;}
p.lowercase {text-transform:lowercase;}
p.capitalize {text-transform:capitalize;}
##文本缩进
p {text-indent:50px;}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;CSS 字体&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;##字体样式
&amp;lt;style&amp;gt;
p.normal {font-style:normal;}
p.italic {font-style:italic;}
p.oblique {font-style:oblique;}
&amp;lt;/style&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p class=&amp;quot;normal&amp;quot;&amp;gt;这是一个段落,正常。&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;italic&amp;quot;&amp;gt;这是一个段落,斜体。&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;oblique&amp;quot;&amp;gt;这是一个段落,斜体。&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;

##字体大小
h1 {font-size:40px;}
h2 {font-size:30px;}
p {font-size:14px;}
h1 {font-size:2.5em;} /* 40px/16=2.5em */
h2 {font-size:1.875em;} /* 30px/16=1.875em */
p {font-size:0.875em;} /* 14px/16=0.875em */
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;学到这里也就了解CSS的一个基本语法结构了，不需要深入了&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Shiny and shinyboard学习</title>
      <link>/blog/cn/2017/08/shiny-and-shinyboard/</link>
      <pubDate>Tue, 29 Aug 2017 16:50:01 +0000</pubDate>
      
      <guid>/blog/cn/2017/08/shiny-and-shinyboard/</guid>
      <description>
        

&lt;p&gt;Rblogdonw+Hugo用来实现静态网页，Shiny用于实现动态网页，几乎把R这个工具发挥到了极致，使其无所不能，R可以解决一切&lt;strong&gt;简单&lt;/strong&gt;的需要了。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;1-shiny&#34;&gt;1. Shiny&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://yanping.me/shiny-tutorial/&#34;&gt;中文教程&lt;/a&gt;. Among them, the Articles are very useful.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shiny.rstudio.com/tutorial/&#34;&gt;英文教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/shiny-examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然而shiny太素颜了，需要一些扩展使得其表现美妙起来。&lt;/p&gt;

&lt;h1 id=&#34;2-shiny-with-html&#34;&gt;2. Shiny with HTML&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(shiny::tages)  ## 100多种HTML标签

tags$div(class = &amp;quot;header&amp;quot;, checked = NA,
  tags$p(&amp;quot;Ready to take the Shiny tutorial? If so&amp;quot;),
  tags$a(href = &amp;quot;shiny.rstudio.com/tutorial&amp;quot;, &amp;quot;Click Here!&amp;quot;)
)
## &amp;lt;div class=&amp;quot;header&amp;quot; checked&amp;gt;
##   &amp;lt;p&amp;gt;Ready to take the Shiny tutorial? If so&amp;lt;/p&amp;gt;
##   &amp;lt;a href=&amp;quot;shiny.rstudio.com/tutorial&amp;quot;&amp;gt;Click Here!&amp;lt;/a&amp;gt;
## &amp;lt;/div&amp;gt; 

withTags({
  div(class=&amp;quot;header&amp;quot;, checked=NA,
    p(&amp;quot;Ready to take the Shiny tutorial? If so&amp;quot;),
    a(href=&amp;quot;shiny.rstudio.com/tutorial&amp;quot;, &amp;quot;Click Here!&amp;quot;)
  )
})
## &amp;lt;div class=&amp;quot;header&amp;quot; checked&amp;gt;
##   &amp;lt;p&amp;gt;Ready to take the Shiny tutorial? If so&amp;lt;/p&amp;gt;
##   &amp;lt;a href=&amp;quot;shiny.rstudio.com/tutorial&amp;quot;&amp;gt;Click Here!&amp;lt;/a&amp;gt;
## &amp;lt;/div&amp;gt; 

##lists
tags$div(class=&amp;quot;header&amp;quot;, checked=NA,
  list(
    tags$p(&amp;quot;Ready to take the Shiny tutorial? If so&amp;quot;),
    tags$a(href=&amp;quot;shiny.rstudio.com/tutorial&amp;quot;, &amp;quot;Click Here!&amp;quot;),
    &amp;quot;Thank you&amp;quot;
  )
)
## &amp;lt;div class=&amp;quot;header&amp;quot; checked&amp;gt;
##   &amp;lt;p&amp;gt;Ready to take the Shiny tutorial? If so&amp;lt;/p&amp;gt;
##   &amp;lt;a href=&amp;quot;shiny.rstudio.com/tutorial&amp;quot;&amp;gt;Click Here!&amp;lt;/a&amp;gt;
##   Thank you
## &amp;lt;/div&amp;gt; 


# Raw HTML 加 HTML()
tags$div(
  HTML(&amp;quot;&amp;lt;strong&amp;gt;Raw HTML!&amp;lt;/strong&amp;gt;&amp;quot;)
)
## &amp;lt;div&amp;gt;&amp;lt;strong&amp;gt;Raw HTML!&amp;lt;/strong&amp;gt;&amp;lt;/div&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HTML 前端+ Shiny服务器端数据响应机制&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;HTML form elements (in this case a select list and a number input) are bound to input slots using their &lt;strong&gt;name&lt;/strong&gt; attribute.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Output is rendered into HTML elements based on matching their &lt;strong&gt;id&lt;/strong&gt; attribute to an output slot and by specifying the requisite css class for the element (in this case either shiny-text-output, shiny-plot-output, or shiny-html-output)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;library(shiny)
runExample(&amp;quot;08_html&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;3-shinydashboard&#34;&gt;3. Shinydashboard&lt;/h1&gt;

&lt;p&gt;这是一个扩展R包，使其有一些面板功能。入门讲解在&lt;a href=&#34;https://rstudio.github.io/shinydashboard/index.html&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;4-shinyjs&#34;&gt;4. Shinyjs&lt;/h1&gt;

&lt;p&gt;从&lt;a href=&#34;https://github.com/daattali/shinyjs&#34;&gt;这里学习&lt;/a&gt;，这个放在以后再深入吧。&lt;/p&gt;

&lt;h1 id=&#34;5-shinythemes&#34;&gt;5. Shinythemes&lt;/h1&gt;

&lt;h1 id=&#34;6-shiny-server&#34;&gt;6. shiny server&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/shiny-server&#34;&gt;学习入口&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.rstudio.com/products/shiny/download-server/&#34;&gt;最新安装文件&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;$ sudo su - \
-c &amp;quot;R -e \&amp;quot;install.packages(&#39;shiny&#39;, repos=&#39;https://cran.rstudio.com/&#39;)\&amp;quot;&amp;quot;
$ sudo apt-get install gdebi-core
$ wget https://download3.rstudio.org/ubuntu-12.04/x86_64/shiny-server-1.5.4.869-amd64.deb
$ sudo gdebi shiny-server-1.5.4.869-amd64.deb

start shiny-server 　　　　   # 启动
stop shiny-server 　　　　　# 停止
restart shiny-server 　　　　# 重启
status shiny-server 　　　　#查看状态  
reload shiny-server 　　　　#不中断服务的前提下 更新加载配置项

##web 查看
localhost:3838   默认端口时3838，可以在配置文件(/etc/shiny-server/shiny-server.conf)中修改：端口 和run_as默认为shiny,可改为username

Shiny Server默认会在/srv/shiny-server/目录查找你的Apps程序,可以把你开发的apps拷贝这个目录下
sudo cp ~/app file /srv/shiny-server/ 将文件拷入

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;######
一个生信技能树的参考教程
前几天刚好在亚马逊云上注册了一个1年免费的Amazon Web Services (AWS) ，正好以此来尝试学习下shiny的相关东西。

主要参考了：
http://deanattali.com/2015/05/09/setup-rstudio-shiny-server-digital-ocean/
http://www.bio-info-trainee.com/1683.html
操作系统：ubuntu
1. 安装 R
        sudo apt install r-base
2. 安装
Rstudio-server
        sudo apt-get install gdebi-core
        sudo apt-get install libapparmor1
        wget https://download2.rstudio.org/rstudio-server-1.0.143-amd64.deb
        sudo gdebi rstudio-server-1.0.143-amd64.deb
因为Rstudio-server不能以root用户登录，所以我们需要创建一个用户
        sudo adduser xxxxx
        ......
然后在网页上输入ip:8787进入Rstudio-server界面，输入用户和密码，即可登录

3. 安装
Shiny
        sudo su - -c &amp;quot;R -e \&amp;quot;install.packages(&#39;shiny&#39;, repos=&#39;http://cran.rstudio.com/&#39;)\&amp;quot;&amp;quot;
不能直接进入R，然后install.packages(&amp;quot;shiny&amp;quot;)，因为如果这样安装，是将shiny包安装下当前登录用户的个人library中，使得最终shiny-server无法运行
        apt-get install gdebi-core
        wget https://download3.rstudio.org/ub ... 1.5.3.838-amd64.deb
        sudo gdebi shiny-server-1.5.3.838-amd64.deb

做完以上几步后，shiny-server算是初步安装好了，然后可以在网页上ip:3838进入shiny-server界面(ip是你服务器的ip地址)。一般我们能看到左边一列的文字和右边的两个框。当然还需要再安装个rmarkdown，不然还是会有error的

        sudo su - -c &amp;quot;R -e \&amp;quot;install.packages(&#39;rmarkdown&#39;, repos=&#39;http://cran.rstudio.com/&#39;)\&amp;quot;&amp;quot;

4. 配置shiny server

    * Shiny Server log is at /var/log/shiny-server.log
    * The default Shiny Server homepage you’re seeing is located at /srv/shiny-server/index.html
- you can edit it or remove it.
    * Any Shiny app directory that you place under /srv/shiny-server/ will be served as a Shiny app. For example, there is a default app at /srv/shiny-server/sample-apps/hello/, which means you can run the app by going to http://123.456.1.2:3838/sample-apps/hello/

    * The config file for Shiny Server is at /etc/shiny-server/shiny-server.conf
    * To reload the server after editing the config, use sudo reload shiny-server
    * When hosting an Rmarkdown file, name the file index.rmd and add runtime: shiny to the document’s frontmatter

5. 赋予shiny权限
假设当你登录是以自己用户登录，你在shiny server创建的文件只有该用户（除了root）才有权限读写，但是shiny server是以shiny用户来运行shiny的app，所以要给予shiny用户在一些目录的权限。
例如：

        sudo groupadd shiny-apps
        sudo usermod -aG shiny-apps dean
        sudo usermod -aG shiny-apps shiny
        sudo chown -R dean:shiny-apps /srv/shiny-server
        sudo chmod g+w /srv/shiny-server
        sudo chmod g+s /srv/shiny-server  ####在该目录下创建的文件都属于该目录所属的组
        
6. 下载shiny官网的例子
git clone https://github.com/rstudio/shiny-examples.git
文件是要下载到/srv/shiny-server中
7. 运行例子程序
http://ip:3838/shiny-examples/010-download/ （ip是你服务器的ip地址）
想要运行哪个shiny app，只要在ip:3838/后面添加/srv/shiny-server中的文件的相对路径即可
###

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;最近用shiny做了一个页面，也是一个艰难的开始。Mark in(&amp;ldquo;Mon Sep 04 19:03:13 2017&amp;rdquo;)&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>A collection of Command</title>
      <link>/blog/cn/2017/08/a-collection-of-command/</link>
      <pubDate>Mon, 28 Aug 2017 12:00:58 +0000</pubDate>
      
      <guid>/blog/cn/2017/08/a-collection-of-command/</guid>
      <description>
        

&lt;h1 id=&#34;dos&#34;&gt;DOS&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;cd /   [root]&lt;/li&gt;
&lt;li&gt;cd ~  [home or root/user]&lt;/li&gt;
&lt;li&gt;cd . [Current]&lt;/li&gt;
&lt;li&gt;cd .. [Father]&lt;/li&gt;
&lt;li&gt;cd - [previous]&lt;/li&gt;
&lt;li&gt;pwd [current]&lt;/li&gt;
&lt;li&gt;d: +Enter [D:/]&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;ubuntu&#34;&gt;Ubuntu&lt;/h1&gt;

&lt;h3 id=&#34;basic&#34;&gt;Basic&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;sudo su 进入root&lt;/li&gt;
&lt;li&gt;exit &lt;strong&gt;or&lt;/strong&gt; logout  &lt;strong&gt;or&lt;/strong&gt; ctrl D 退出root&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;download&#34;&gt;Download&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&amp;amp; 加在一个命令之后可以把这个命令放到后台运行&lt;/li&gt;
&lt;li&gt;Ctrl+Z 可以把一个前台执行的命令放到后台&lt;/li&gt;
&lt;li&gt;jobs -l 查看后台运行的命令&lt;/li&gt;
&lt;li&gt;fg %jobnumber 将后台命令调到前台&lt;/li&gt;
&lt;li&gt;bg %jobnumber 重启后台暂停的命令&lt;/li&gt;
&lt;li&gt;kill %num 杀死&lt;/li&gt;
&lt;li&gt;ps 查看进程号PID&lt;/li&gt;
&lt;li&gt;nohup 始终执行&lt;/li&gt;
&lt;li&gt;ps - aux | grep xxx 显示终端关闭后的后台进程


&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;修改权限和所有者&#34;&gt;修改权限和所有者&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;[chmod -R 700 Document/]变更权限(-R参数是递归)&lt;/li&gt;
&lt;li&gt;[chown -R username:root Document/]修改所有者为root用户组的username用户&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;常用几种&#34;&gt;常用几种&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;sudo chmod -[读,写,执行]×××（所有者）×××（组用户）×××（其他用户）&lt;/li&gt;
&lt;li&gt;sudo chmod 600 ××× （只有所有者有读和写的权限）&lt;/li&gt;
&lt;li&gt;sudo chmod 644 ××× （所有者有读和写的权限，组用户只有读的权限）&lt;/li&gt;
&lt;li&gt;sudo chmod 700 ××× （只有所有者有读和写以及执行的权限）&lt;/li&gt;
&lt;li&gt;sudo chmod 666 ××× （每个人都有读和写的权限）&lt;/li&gt;
&lt;li&gt;sudo chmod 777 ××× （每个人都有读和写以及执行的权限）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;磁盘管理&#34;&gt;磁盘管理&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;mkdir -p 递归创建目录&lt;/li&gt;
&lt;li&gt;cp 复制&lt;/li&gt;
&lt;li&gt;rmdir 删除空目录&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;df -lh 查看磁盘空间&lt;br /&gt;
df -kh 查看磁盘挂载&lt;/li&gt;
&lt;li&gt;sudo fdisk -lu 显示硬盘及所属分区情况&lt;/li&gt;
&lt;li&gt;sudo fdisk /dev/sdb 对sbd盘分区&lt;br /&gt;
m(help)-n(增加一个新分区)-e(扩展分区)-1-4(分几个区)-&amp;hellip;-p(显示分区表)-w(保存分区表)&lt;/li&gt;
&lt;li&gt;sudo mkfs -t ext4 /dev/sdb 对sdb盘格式化为ext4格式&lt;/li&gt;
&lt;li&gt;sudo blkid 查看分区的UUID&lt;/li&gt;
&lt;li&gt;sudo blkid /dev/sda5 查看指定盘的UUID&lt;/li&gt;
&lt;li&gt;sudo mount -t ext4 /dev/sdb /data1 挂载到data1&lt;/li&gt;

&lt;li&gt;&lt;p&gt;suod umount /dev/sdb 卸载&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;sudo chown -R username:root Document/  修改文件夹所有者&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ubuntu 加载新硬盘教程&lt;a href=&#34;http://note.youdao.com/noteshare?id=19c72003e1f78ed8dafbe12c53c6e150&amp;amp;sub=8E9A1BEDF6AE4F73AB50892F428B249C&#34;&gt;Here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ubuntu&lt;a href=&#34;/blog/blog/pdf/Ubuntu命令手册.pdf&#34;&gt;命令手册&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;vi-操作&#34;&gt;vi 操作&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;基本上vi可以分为三种状态

&lt;ul&gt;
&lt;li&gt;分别是命令模式（command mode）：移动光标,删除&lt;/li&gt;
&lt;li&gt;插入模式（Insert mode）：用于输入字符&lt;/li&gt;
&lt;li&gt;底行模式（last line mode）：设置编辑环境和保存&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;进入vi  初始为命令模式
$vi file&lt;/li&gt;
&lt;li&gt;进入插入模式： 在命令模式下输入[i]&lt;/li&gt;
&lt;li&gt;ESC 返回命令模式&lt;/li&gt;
&lt;li&gt;[:]进入底行模式

&lt;ul&gt;
&lt;li&gt;[w fileName]以指定名字保存&lt;/li&gt;
&lt;li&gt;[wq]存盘并退出&lt;/li&gt;
&lt;li&gt;[q!]不存盘退出&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/itech/archive/2009/04/17/1438439.html&#34;&gt;更复杂用法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

        
      </description>
    </item>
    
    <item>
      <title>上线测试</title>
      <link>/blog/cn/2017/08/sem3/</link>
      <pubDate>Sun, 27 Aug 2017 20:56:14 +0000</pubDate>
      
      <guid>/blog/cn/2017/08/sem3/</guid>
      <description>
        &lt;p&gt;今天终于把blog搭建好了，mark and test&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>一些关于基因组名字的含义</title>
      <link>/blog/cn/2017/07/sem2/</link>
      <pubDate>Tue, 18 Jul 2017 14:18:14 +0000</pubDate>
      
      <guid>/blog/cn/2017/07/sem2/</guid>
      <description>
        &lt;p&gt;NC表示人类基因组DNA的RefSeq。&lt;/p&gt;

&lt;p&gt;NM表示mRNA的RefSeq。&lt;/p&gt;

&lt;p&gt;NP表示蛋白质的RefSeq。&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>GO分析和Pathway分析</title>
      <link>/blog/cn/2016/12/sem1/</link>
      <pubDate>Thu, 15 Dec 2016 17:07:42 +0000</pubDate>
      
      <guid>/blog/cn/2016/12/sem1/</guid>
      <description>
        &lt;p&gt;干Bioinformatics差不多2年半了，却一直到对GO和pathway的区别搞不清楚，现在明白又觉好笑，记几个字在这里。&lt;/p&gt;

&lt;p&gt;一般对一组Gene Set 做GO是想看哪些生物功能；比如一个功能，有很多基因都和这个功能相关，把这个功能相关的所有基因找出来。&lt;/p&gt;

&lt;p&gt;而对一组GeneSet 做Kegg主要是看通路，在通路上的联系。&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
